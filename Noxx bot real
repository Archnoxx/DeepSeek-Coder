//+------------------------------------------------------------------+
//|                                             AdaptiveFXPro.mq5    |
//|                        Copyright 2024, MetaQuotes Software Corp. |
//|                                             https://www.mql5.com |
//+------------------------------------------------------------------+

#property copyright "Copyright 2024, MetaQuotes Software Corp."
#property link      "https://www.mql5.com"
#property version   "1.00"

// External Parameters
input double RiskPercentage = 1.0;          // Risk per trade (%)
input int ATR_Period = 14;                  // ATR period
input double ATR_Multiplier = 1.0;          // ATR multiplier for SL
input int MA_Fast = 5;                      // Fast MA period for M1
input int MA_Slow = 20;                     // Slow MA period for M1
input int RSI_Period = 14;                  // RSI period
input double RSI_Overbought = 70;           // RSI overbought level
input double RSI_Oversold = 30;             // RSI oversold level
input double MaxSpread = 20;                // Maximum allowed spread (points)
input bool UseNewsFilter = true;            // News filter toggle
input int MinBeforeMajorNews = 60;          // Minutes before major news
input int MinAfterMajorNews = 30;           // Minutes after major news
input double MinProfitTarget = 1.5;         // Minimum reward:risk ratio

// Global Variables
int g_MagicNumber = 20240301;
datetime g_LastTradeTime = 0;

// Indicator Handles
int handle_ma_fast, handle_ma_slow, handle_rsi, handle_atr;

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
   // Initialize indicator handles
   handle_ma_fast = iMA(_Symbol, PERIOD_M1, MA_Fast, 0, MODE_SMA, PRICE_CLOSE);
   handle_ma_slow = iMA(_Symbol, PERIOD_M1, MA_Slow, 0, MODE_SMA, PRICE_CLOSE);
   handle_rsi = iRSI(_Symbol, PERIOD_M1, RSI_Period, PRICE_CLOSE);
   handle_atr = iATR(_Symbol, PERIOD_M1, ATR_Period);
   
   if (handle_ma_fast == INVALID_HANDLE ||
       handle_ma_slow == INVALID_HANDLE ||
       handle_rsi == INVALID_HANDLE ||
       handle_atr == INVALID_HANDLE)
   {
      Print("Error creating indicator handles");
      return INIT_FAILED;
   }
   
   return INIT_SUCCEEDED;
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
   IndicatorRelease(handle_ma_fast);
   IndicatorRelease(handle_ma_slow);
   IndicatorRelease(handle_rsi);
   IndicatorRelease(handle_atr);
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
   if (!IsTradeAllowed()) return;
   if (!IsNewCandle()) return;
   
   ExecuteTradeLogic();
}

//+------------------------------------------------------------------+
//| Check if trading is allowed                                      |
//+------------------------------------------------------------------+
bool IsTradeAllowed()
{
   // Check account type
   ENUM_ACCOUNT_TRADE_MODE account_type = (ENUM_ACCOUNT_TRADE_MODE)AccountInfoInteger(ACCOUNT_TRADE_MODE);
   if (account_type != ACCOUNT_TRADE_MODE_DEMO && account_type != ACCOUNT_TRADE_MODE_REAL)
      return false;
   
   // Check spread
   long spread = SymbolInfoInteger(_Symbol, SYMBOL_SPREAD);
   if (spread > MaxSpread)
   {
      Print("Spread too high: ", spread);
      return false;
   }
   
   // Add news filter check here if implemented
   
   return true;
}

//+------------------------------------------------------------------+
//| Check for new candle formation                                   |
//+------------------------------------------------------------------+
bool IsNewCandle()
{
   static datetime prev_time = 0;
   datetime current_time[1];
   
   if (CopyTime(_Symbol, PERIOD_M1, 0, 1, current_time) != 1)
      return false;
   
   if (current_time[0] != prev_time)
   {
      prev_time = current_time[0];
      return true;
   }
   return false;
}

//+------------------------------------------------------------------+
//| Calculate position size                                          |
//+------------------------------------------------------------------+
double CalculateLotSize(double sl_distance)
{
   double tick_value = SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_VALUE);
   if (tick_value == 0) return 0;
   
   double risk_amount = AccountInfoDouble(ACCOUNT_BALANCE) * RiskPercentage / 100;
   double risk_points = sl_distance / _Point;
   double lot_step = SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_STEP);
   
   double lots = risk_amount / (risk_points * tick_value);
   lots = MathFloor(lots / lot_step) * lot_step;
   
   // Check min/max lots
   lots = MathMax(lots, SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_MIN));
   lots = MathMin(lots, SymbolInfoDouble(_Symbol, SYMBOL_VOLUME_MAX));
   
   return NormalizeDouble(lots, 2);
}

//+------------------------------------------------------------------+
//| Execute trading logic                                            |
//+------------------------------------------------------------------+
void ExecuteTradeLogic()
{
   // Check existing positions
   if (PositionsTotal() > 0) return;

   // Get indicator values
   double ma_fast[1], ma_slow[1], rsi[1], atr[1];
   
   if (CopyBuffer(handle_ma_fast, 0, 0, 1, ma_fast) != 1 ||
       CopyBuffer(handle_ma_slow, 0, 0, 1, ma_slow) != 1 ||
       CopyBuffer(handle_rsi, 0, 0, 1, rsi) != 1 ||
       CopyBuffer(handle_atr, 0, 0, 1, atr) != 1)
   {
      Print("Error copying indicator buffers");
      return;
   }

   // Check trading signals
   double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
   double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
   
   MqlTradeRequest request = {};
   MqlTradeResult result = {};
   
   // Buy condition
   if (ma_fast[0] > ma_slow[0] && rsi[0] < RSI_Oversold)
   {
      double sl_price = bid - (atr[0] * ATR_Multiplier);
      double tp_price = bid + (atr[0] * ATR_Multiplier * MinProfitTarget);
      double lot_size = CalculateLotSize(atr[0] * ATR_Multiplier);
      
      if (lot_size <= 0) return;
      
      ZeroMemory(request);
      request.action = TRADE_ACTION_DEAL;
      request.symbol = _Symbol;
      request.volume = lot_size;
      request.type = ORDER_TYPE_BUY;
      request.price = ask;
      request.sl = sl_price;
      request.tp = tp_price;
      request.deviation = 5;
      request.magic = g_MagicNumber;
      
      if (!OrderSend(request, result))
         Print("Buy order failed. Error: ", GetLastError());
   }
   
   // Sell condition
   if (ma_fast[0] < ma_slow[0] && rsi[0] > RSI_Overbought)
   {
      double sl_price = ask + (atr[0] * ATR_Multiplier);
      double tp_price = ask - (atr[0] * ATR_Multiplier * MinProfitTarget);
      double lot_size = CalculateLotSize(atr[0] * ATR_Multiplier);
      
      if (lot_size <= 0) return;
      
      ZeroMemory(request);
      request.action = TRADE_ACTION_DEAL;
      request.symbol = _Symbol;
      request.volume = lot_size;
      request.type = ORDER_TYPE_SELL;
      request.price = bid;
      request.sl = sl_price;
      request.tp = tp_price;
      request.deviation = 5;
      request.magic = g_MagicNumber;
      
      if (!OrderSend(request, result))
         Print("Sell order failed. Error: ", GetLastError());
   }
}
//+------------------------------------------------------------------+
